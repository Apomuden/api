<?php

namespace App\Console\Commands;

use Illuminate\Console\GeneratorCommand;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Str;

class StandardResourceCommand extends GeneratorCommand
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'make:standardResource {name} {--t|table=}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new Resource based on the standard used by the Apomuden Backend Team';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Resource';

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return __DIR__ . '/Stubs/resource.standard.stub';
    }

    protected function replaceClass($stub, $name)
    {
        $name = str_replace('Resource', '', $name);
        return parent::replaceClass($stub, $name); // TODO: Change the autogenerated stub
    }

    protected function getPath($name)
    {
        $name = Str::endsWith($name, 'Resource') ? $name : $name . 'Resource';
        return parent::getPath($name); // TODO: Change the autogenerated stub
    }

    protected function buildClass($name)
    {
        return parent::buildClass($name); // TODO: Change the autogenerated stub
    }

    protected function replaceNamespace(&$stub, $name)
    {
        $classNameUnderscore = Str::snake(Str::afterLast(Str::pluralStudly($name), '\\'));
        $tableName = $this->option('table') ?? $classNameUnderscore;

        $tableColumns = Schema::getColumnListing($tableName);
        $requestParams = "";
        foreach ($tableColumns as $tableColumn) {
            if ($tableColumn == 'created_at' || $tableColumn == 'updated_at' || $tableColumn == 'deleted_at') {
                if ($tableColumn == 'deleted_at') {
                    continue;
                }
                $requestParams .= '\'' . $tableColumn . '\' => DateHelper::toDisplayDateTime($this->' . $tableColumn . '),' . PHP_EOL;
            } else {
                $requestParams .= '\'' . $tableColumn . '\' => $this->' . $tableColumn . ',' . PHP_EOL;
            }
        }
        $stub = str_replace('DummyContent', $requestParams, $stub);
        //dd($requestParams);
        return parent::replaceNamespace($stub, $name); // TODO: Change the autogenerated stub
    }

    /**
     * Get the default namespace for the class.
     *
     * @param string $rootNamespace
     *
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace . '\Http\Resources';
    }
}
